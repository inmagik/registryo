"""
Django settings for docker_registry_ui project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "2mx#78)@hz_^%q*$i)k9ki&g3*ch5y&3rg8-wfbn_l7z6iz9as"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "django_filters",
    "main",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "docker_registry_ui.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "docker_registry_ui.wsgi.application"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        "main.authentication.DockerAuthentication",
        "main.authentication.PayloadAuthentication",
    )
}


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"

# Key configuration

JWT_CERT_FILE = os.environ.get(
    "CERT_FILE_PATH", BASE_DIR.joinpath("certfile.pem")
)
JWT_KEY_FILE = os.environ.get(
    "KEY_FILE_PATH", BASE_DIR.joinpath("privkey.pem")
)

# Server configuration

JWT_SERVER_FQDN = os.environ.get("SERVER_FQDN", "auth.example.com")
JWT_REGISTRY_NAME = os.environ.get("REGISTRY_NAME", "registry.example.com")
JWT_REGISTRY_URL = os.environ.get(
    "REGISTRY_URL", "https://registry.example.com/v2"
)

# Mail configuration
email_driver = os.environ.get("EMAIL_DRIVER", "none")
if email_driver.lower() == "sendinblue":
    EMAIL_BACKEND = "anymail.backends.sendinblue.EmailBackend"
    ANYMAIL = {
        "SENDINBLUE_API_KEY": os.environ.get("SENDINBLUE_API_KEY", ""),
    }
elif email_driver.lower() == "smtp":
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = os.environ.get("EMAIL_HOST", "")
    EMAIL_PORT = os.environ.get("EMAIL_PORT", "")
    EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "")
    EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")
    EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", "")
    EMAIL_USE_SSL = os.environ.get("EMAIL_USE_SSL", "")
    EMAIL_TIMEOUT = os.environ.get("EMAIL_TIMEOUT", "")
    EMAIL_SSL_KEYFILE = os.environ.get("EMAIL_SSL_KEYFILE", "")
    EMAIL_SSL_CERTFILE = os.environ.get("EMAIL_SSL_CERTFILE", "")
else:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

FROM_EMAIL = os.environ.get("EMAIL_FROM", "NoReply <no-reply@example.com>")

STATIC_ROOT = "/var/www/statik"
STATIC_URL = "/statik/"

print("Email driver: " + email_driver.lower())

try:
    from .localsettings import *
except ModuleNotFoundError as e:
    pass
